.. _analyze-runtime:

Golang runtime 运行时分析
###############################

**目录：**

    * `调度分析 - GMP调度模型`_
    * `GC 分析 - 三色标记与混合写屏障`_


调度分析 - GMP调度模型
=========================

众所周志，Golang 的优势就在于它的运行高效，在处理高并发问题上大有优势。

那么，Golang 是如何撑起高并发请求的呢？这就是 Golang 运行时高效调度的功劳了。

先来分析一下 Golang 为了高并发处理在底层究竟做了什么。

我们知道，操作系统在处理并发请求时，是通过 CPU 切换线程实现的。多核 CPU 之间实现了并行任务处理。但是，单核 CPU 在同一时间只能处理一个线程的任务。而 CPU 通过线程切换实现了多线程并发机制。但是，**CPU 在线程间切换是很消耗性能的一件事**\ 。




GC 分析 - 三色标记与混合写屏障
=====================================


\ `返回顶部⬆︎ <#>`_\
